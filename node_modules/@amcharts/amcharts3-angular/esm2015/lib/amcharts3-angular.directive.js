import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./amcharts3-angular.service";
function getType(x) {
    // TODO make this faster ?
    return {}.toString.call(x);
}
function hasOwnKey(obj, key) {
    return {}.hasOwnProperty.call(obj, key);
}
function copyObject(x) {
    const output = {};
    // TODO use Object.keys ?
    for (const key in x) {
        if (hasOwnKey(x, key)) {
            output[key] = copy(x[key]);
        }
    }
    return output;
}
function copyArray(x) {
    const length = x.length;
    const output = new Array(length);
    for (let i = 0; i < length; ++i) {
        output[i] = copy(x[i]);
    }
    return output;
}
// TODO can this be made faster ?
// TODO what about regexps, etc. ?
function copy(x) {
    switch (getType(x)) {
        case '[object Array]':
            return copyArray(x);
        case '[object Object]':
            return copyObject(x);
        // TODO is this necessary ?
        case '[object Date]':
            return new Date(x.getTime());
        default:
            return x;
    }
}
function isNaN(x) {
    return x !== x;
}
function isNumberEqual(x, y) {
    return x === y || (isNaN(x) && isNaN(y));
}
function removeChartListeners(chart, x, y) {
    if (x !== y) {
        // TODO is this necessary ?
        if (x == null) {
            x = [];
        }
        // TODO is this necessary ?
        if (y == null) {
            y = [];
        }
        const xLength = x.length;
        const yLength = y.length;
        for (let i = 0; i < xLength; ++i) {
            const xValue = x[i];
            let has = false;
            // TODO make this faster ?
            for (let j = 0; j < yLength; ++j) {
                const yValue = y[j];
                // TODO is this correct ?
                if (xValue.event === yValue.event &&
                    xValue.method === yValue.method) {
                    has = true;
                    break;
                }
            }
            if (!has) {
                // TODO is this correct ?
                chart.removeListener(chart, xValue.event, xValue.method);
            }
        }
    }
}
function updateArray(a, x, y) {
    let didUpdate = false;
    if (x !== y) {
        const xLength = x.length;
        const yLength = y.length;
        if (xLength !== yLength) {
            a.length = yLength;
            didUpdate = true;
        }
        for (let i = 0; i < yLength; ++i) {
            if (i < xLength) {
                if (update(a, i, x[i], y[i])) {
                    didUpdate = true;
                }
            }
            else {
                // TODO make this faster ?
                a[i] = copy(y[i]);
                // TODO is this necessary ?
                didUpdate = true;
            }
        }
    }
    return didUpdate;
}
function update(obj, key, x, y) {
    let didUpdate = false;
    if (x !== y) {
        const xType = getType(x);
        const yType = getType(y);
        if (xType === yType) {
            switch (xType) {
                case '[object Array]':
                    if (updateArray(obj[key], x, y)) {
                        didUpdate = true;
                    }
                    break;
                case '[object Object]':
                    if (updateObject(obj[key], x, y)) {
                        didUpdate = true;
                    }
                    break;
                case '[object Date]':
                    if (x.getTime() !== y.getTime()) {
                        // TODO make this faster ?
                        obj[key] = copy(y);
                        didUpdate = true;
                    }
                    break;
                case '[object Number]':
                    if (!isNumberEqual(x, y)) {
                        // TODO is the copy necessary ?
                        obj[key] = copy(y);
                        didUpdate = true;
                    }
                    break;
                default:
                    if (x !== y) {
                        // TODO is the copy necessary ?
                        obj[key] = copy(y);
                        didUpdate = true;
                    }
                    break;
            }
            // TODO is this correct ?
        }
        else {
            // TODO make this faster ?
            obj[key] = copy(y);
            didUpdate = true;
        }
    }
    return didUpdate;
}
function updateObject(chart, oldObj, newObj) {
    let didUpdate = false;
    if (oldObj !== newObj) {
        // TODO use Object.keys ?
        for (const key in newObj) {
            if (hasOwnKey(newObj, key)) {
                // TODO make this faster ?
                if (hasOwnKey(oldObj, key)) {
                    // TODO should this count as an update ?
                    if (key === 'listeners') {
                        // TODO make this faster ?
                        removeChartListeners(chart, oldObj[key], newObj[key]);
                    }
                    if (update(chart, key, oldObj[key], newObj[key])) {
                        didUpdate = true;
                    }
                }
                else {
                    // TODO make this faster ?
                    chart[key] = copy(newObj[key]);
                    didUpdate = true;
                }
            }
        }
        // TODO use Object.keys ?
        for (const key in oldObj) {
            if (hasOwnKey(oldObj, key) && !hasOwnKey(newObj, key)) {
                if (key === 'listeners') {
                    removeChartListeners(chart, oldObj[key], []);
                }
                delete chart[key];
                didUpdate = true;
            }
        }
    }
    return didUpdate;
}
export class AmChartsDirective {
    constructor(el, AmCharts, zone) {
        this.el = el;
        this.AmCharts = AmCharts;
        this.zone = zone;
        this.delay = 0;
    }
    ngAfterViewInit() {
        // AmCharts mutates the config object, so we have to make a deep copy to prevent that
        const props = copy(this.options);
        const el = this.el.nativeElement;
        el.id = this.id;
        el.style.display = 'block';
        this.chart = this.AmCharts.makeChart(this.id, props, this.delay);
    }
    // TODO is this correct ?
    ngOnChanges(x) {
        const el = this.el.nativeElement;
        if (x.id) {
            el.id = x.id.currentValue;
        }
        if (x.options) {
            // Update the chart after init
            if (this.chart) {
                // This is needed to avoid triggering ngDoCheck
                this.zone.runOutsideAngular(() => {
                    const didUpdate = updateObject(this.chart, x.options.previousValue, x.options.currentValue);
                    // TODO make this faster
                    if (didUpdate) {
                        this.chart.validateNow(true);
                    }
                });
            }
        }
    }
    ngOnDestroy() {
        if (this.chart) {
            this.AmCharts.destroyChart(this.chart);
        }
    }
}
AmChartsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: AmChartsDirective, deps: [{ token: i0.ElementRef }, { token: i1.AmChartsService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
AmChartsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.11", type: AmChartsDirective, selector: "amCharts", inputs: { id: "id", options: "options", delay: "delay" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: AmChartsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'amCharts'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.AmChartsService }, { type: i0.NgZone }]; }, propDecorators: { id: [{
                type: Input
            }], options: [{
                type: Input
            }], delay: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,