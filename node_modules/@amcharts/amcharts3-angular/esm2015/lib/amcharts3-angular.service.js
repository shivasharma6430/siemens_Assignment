import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class AmChartsService {
    constructor(zone) {
        this.zone = zone;
    }
    get StockPanel() {
        return AmCharts.StockPanel;
    }
    get StockGraph() {
        return AmCharts.StockGraph;
    }
    get StockEvent() {
        return AmCharts.StockEvent;
    }
    get StockLegend() {
        return AmCharts.StockLegend;
    }
    get baseHref() {
        return AmCharts.baseHref;
    }
    set baseHref(v) {
        AmCharts.baseHref = v;
    }
    get useUTC() {
        return AmCharts.useUTC;
    }
    set useUTC(v) {
        AmCharts.useUTC = v;
    }
    get dayNames() {
        return AmCharts.dayNames;
    }
    set dayNames(v) {
        AmCharts.dayNames = v;
    }
    get monthNames() {
        return AmCharts.monthNames;
    }
    set monthNames(v) {
        AmCharts.monthNames = v;
    }
    get shortDayNames() {
        return AmCharts.shortDayNames;
    }
    set shortDayNames(v) {
        AmCharts.shortDayNames = v;
    }
    get shortMonthNames() {
        return AmCharts.shortMonthNames;
    }
    set shortMonthNames(v) {
        AmCharts.shortMonthNames = v;
    }
    // TODO better type for this
    get theme() {
        return AmCharts.theme;
    }
    // TODO better type for this
    set theme(v) {
        AmCharts.theme = v;
    }
    get processDelay() {
        return AmCharts.processDelay;
    }
    set processDelay(v) {
        AmCharts.processDelay = v;
    }
    get charts() {
        return AmCharts.charts;
    }
    addInitHandler(handler, types) {
        // TODO use this.zone.runOutsideAngular ?
        AmCharts.addInitHandler(handler, types);
    }
    addPrefix(value, prefixesBig, prefixesSmall, numberFormatter) {
        // TODO use this.zone.runOutsideAngular ?
        return AmCharts.addPrefix(value, prefixesBig, prefixesSmall, numberFormatter);
    }
    clear() {
        // TODO use this.zone.runOutsideAngular ?
        AmCharts.clear();
    }
    formatDate(date, format) {
        // TODO use this.zone.runOutsideAngular ?
        return AmCharts.formatDate(date, format);
    }
    formatNumber(value, formatter, zeroCount) {
        // TODO use this.zone.runOutsideAngular ?
        return AmCharts.formatNumber(value, formatter, zeroCount);
    }
    stringToDate(value, format) {
        // TODO use this.zone.runOutsideAngular ?
        return AmCharts.stringToDate(value, format);
    }
    // TODO is Node the correct type ?
    // TODO better type for config
    makeChart(id, config, delay) {
        return this.zone.runOutsideAngular(() => AmCharts.makeChart(id, config, delay));
    }
    addListener(chart, type, fn) {
        const callback = (e) => {
            this.zone.run(() => {
                fn(e);
            });
        };
        this.zone.runOutsideAngular(() => {
            chart.addListener(type, callback);
        });
        return () => {
            this.zone.runOutsideAngular(() => {
                chart.removeListener(chart, type, callback);
            });
        };
    }
    updateChart(chart, fn) {
        this.zone.runOutsideAngular(() => {
            fn();
            chart.validateNow(true);
        });
    }
    destroyChart(chart) {
        this.zone.runOutsideAngular(() => {
            chart.clear();
        });
    }
}
AmChartsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: AmChartsService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
AmChartsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: AmChartsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.11", ngImport: i0, type: AmChartsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,